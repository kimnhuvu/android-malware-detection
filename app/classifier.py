import filecmp
import os
import pickle
import numpy as np
from keras.models import load_model
from androguard.core.bytecodes.apk import APK
from genetic_algorithm import GeneticSelector


class CustomUnpickler(pickle.Unpickler):
    """ https://stackoverflow.com/questions/27732354/unable-to-load-files-using-pickle-and-multiple-modules"""

    def find_class(self, module, name):
        try:
            return super().find_class(__name__, name)
        except AttributeError:
            return super().find_class(module, name)


sel = CustomUnpickler(open('C:/Users/ADMIN/Documents/GitHub/android-malware-detection/app/static/models/ga.pkl', 'rb')).load()

permissions = []
with open('C:/Users/ADMIN/Documents/GitHub/android-malware-detection/app/static/permissions.txt', 'r') as f:
    content = f.readlines()
    for line in content:
        cur_perm = line[:-1]
        permissions.append(cur_perm)

#----------------------------------------LSTM---------------------------------------------------------
setPerms = []
f1 = open('C:/Users/ADMIN/Documents/GitHub/android-malware-detection/app/static/PermissionListForPrediction.txt')
temp = f1.read()
setPerms = temp[2:-2].split("', '")
#-----------------------------------------------------------------------------------------------------
#----- LSTM


def process1(file):
    res = []
    a = APK(file)
    arr1 = a.get_permissions()
    for i in arr1:
        temp = i.split('.')
        if 'permission' in temp:
            ind = temp.index('permission')
            res.append(".".join(temp[ind:]))

    predictionList = [0] * len(setPerms)
    for i in res:
        if i in setPerms:
            predictionList[setPerms.index(i)] = 1 
    return predictionList
#----- Other
def process2(file):
    vector = {}
    app = APK(file)
    perm = app.get_permissions()
    
    for p in permissions:
        if p in perm:
            vector[p] = 1
        else:
            vector[p] = 0
    data = [v for v in vector.values()]
    data = np.array(data) 
    return data
#-------------------------------------------

def classify(file, ch):
    name, sdk, size = 'unknown', 'unknown', 'unknown'
    name, sdk, size = meta_fetch(file)
    result = 0
    # app = APK(file)
    # perm = app.get_permissions()
    # name, sdk, size = meta_fetch(file)
    # for p in permissions:
    #     if p in perm:
    #         vector[p] = 1
    #     else:
    #         vector[p] = 0
    # data = [v for v in vector.values()]
    # data = np.array(data)
    if ch == 0:
        ANN = load_model('C:/Users/ADMIN/Documents/GitHub/android-malware-detection/app/static/models/ANN.h5')
        #print(data)
        result = ANN.predict([process2(file)[sel.support_].tolist()])
        print(result)

        if result < 0.02:
            # return 'Benign(safe)'
            result = 'Benign(safe)'
        else:
            # return 'Malware'
            result = 'Malware'
    if ch == 1:
        SVC = pickle.load(open('C:/Users/ADMIN/Documents/GitHub/android-malware-detection/app/static/models/svc_ga.pkl', 'rb'))
        result = SVC.predict([process2(file)[sel.support_]])
        if result == 'benign':
            result = 'Benign(safe)'
        else:
            result = 'Malware'
# Long short term memory
    if ch == 2:
        LSTM = load_model('C:/Users/ADMIN/Documents/GitHub/android-malware-detection/app/static/models/PermissionModel.h5')
        result = LSTM.predict(np.array(process1(file), ndmin=3))
        print(result)

        if result < 0.02:
            # return 'Benign(safe)'
            result = 'Benign(safe)'
        else:
            # return 'Malware'
            result = 'Malware'           
# SUPPORT VECTOR MACHINE
    # if ch == 3:
        # SVM = load_model(open('C:/Users/ADMIN/Documents/GitHub/android-malware-detection/app/static/models/SVM_.pkl', 'rb'))
        # result = SVM.predict([process1(file)[sel.support_]])
        # print(result)
# 
        # if result < 0.02:
        #    return 'Benign(safe)'
            # result = 'Benign(safe)'
        # else:
        #    return 'Malware'
            # result = 'Malware'         
# RANDOM FOREST
    # if ch == 4:
        # RFC = pickle.load(open('C:/Users/ADMIN/Documents/GitHub/android-malware-detection/app/static/models/Randomforest_.pkl', 'rb'))
        # result = RFC.predict([process2(file)])
        # print(result)

        # if result < 0.02:
        #     return 'Benign(safe)'
        #     # result = 'Benign(safe)'
        # # else:
        #     return 'Malware'
            # result = 'Malware'         
    return result, name, sdk, size

def meta_fetch(apk):
    app = APK(apk)
    return app.get_app_name(), app.get_target_sdk_version(), str(round(os.stat(apk).st_size / (1024 * 1024), 2)) + ' MB'

#print(classify('C:/Users/ADMIN/Documents/GitHub/android-malware-detection/static/upload/br.com.tapps.myderp.apk',4))
